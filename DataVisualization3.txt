
https://raw.githubusercontent.com/insaid2018/Term-1/master/Data/Projects/facebook_data.csv
Pie Chart:
df_merge['Ownership_Type'].value_counts().plot(kind='pie', explode=[0.05,0.05,0.05], fontsize=14, autopct='%3.1f%%', 
                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='summer')

plt.ylabel('Ownership Type')
plt.title('Donut Plot showing the proportion of each Ownership_Type value')


# Using pandas plot function to plot a donut plot of the Category column.
# Using kind='pie' to plot a donut plot, also setting explode values so that it takes a donut shape instead of a pie shape.

space = np.ones(11)/10
df_mcd['Category'].value_counts().plot(kind='pie', explode=space, fontsize=14, autopct='%3.1f%%', wedgeprops=dict(width=0.15), 
                                       shadow=True, startangle=160, figsize=(10,10), cmap='inferno', legend=True)

plt.ylabel('Category')
plt.title('Donut Plot showing the proportion of each Category value')


Horizintal Bar Graph:

df_merge.groupby(['Category'])['Energy'].mean().sort_values().plot(kind='barh', figsize=(12,8), fontsize=13, color='red')
plt.xlabel('Calories')

Box plot
plt.figure(figsize=(16, 7))
sns.boxplot(data=df_merge, x='Category', y='Dietary_Fibre', palette='viridis', width=0.8)
plt.xticks(rotation=90)

Heat Map:

plt.figure(figsize=(8, 6))
df_nutritious = df_nutritious[Nutritious]
sns.heatmap(df_nutritious, annot=True, cmap='viridis')
plt.title('Food items with high Protein and Fibre Content')


Scatter plot:

trace = go.Scatter(y=df_merge['Protein'].values, x=df_merge['Best_Selling_Item'].values, mode='markers',
                   marker=dict(size=df_merge['Protein'].values, color=df_merge['Protein'].values, colorscale='Rainbow',
                               showscale=True))
							   
	data = [trace]
	

	
	layout = go.Layout(autosize=True, title = go.layout.Title(text='Scatter plot of Protein per Item on the Menu'), 
                   hovermode='closest', xaxis=dict(showgrid=False, zeroline=False, showline=False), 
                   yaxis=dict(title='Protein', ticklen=5, gridwidth=2, showgrid=False, zeroline=False, showline=False), 
                   showlegend=False)
				   
				   
	fig = go.Figure(data=data, layout=layout)
iplot(fig, filename='scatterChol')



Cat plot:
sns.catplot(x='Ownership_Type', y='Number_of_Employees', hue='Country', data=df_merge, height=7, kind='bar', 
            palette='spring')
			
			
			
			Box Plot:
			for key, value in enumerate(nutritional_info):
    sns.boxplot(data=df_merge, x=value, y='Country', orient='h', ax=axes[key], palette='winter')
	
	
	Pie Chart: Donut
	
	df_merge.groupby(['Country', 'Category'])['Revenue'].mean().plot(kind='pie', autopct='%3.1f%%', wedgeprops=dict(width=0.15), 
                                                                 explode=np.ones(20)/10, figsize=(13, 12), fontsize=11, 
                                                                 startangle=20, shadow=True, cmap='inferno')
																 
																 
																 
Count Plot:

plt.figure(figsize=(10,5))
sns.countplot('gender',data = mh, order = mh['gender'].value_counts().index,palette="PuBuGn_d")
plt.title("Gender Counts",fontsize=18,fontweight="bold")
plt.xlabel('Gender')
plt.ylabel('Frequency')
plt.show()


Sub Plots: Pie Chart

f,ax = plt.subplots(1,3,figsize=(22,6))
mh['treatment'][mh['gender'] == 'male'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[0],shadow=True)
mh['treatment'][mh['gender'] == 'female'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[1],shadow=True)
mh['treatment'][mh['gender'] == 'trans'].value_counts().plot.pie(explode=[0,0.2],autopct='%1.1f%%',ax=ax[2],shadow=True)
ax[0].set_title('treatment (male)')
ax[1].set_title('treatment (female)')
ax[2].set_title('treatment (trans)')


Label Encoding:
from sklearn.preprocessing import LabelEncoder                                    # Label encoder is used to transform non-numerical labels to numerical labels.
number = LabelEncoder()                                                           # Here as our data set consists only of categorical values except age
for i in mh_new.columns:                                                          # in order to find the correlation between variables, we do Label encoding 
    mh_new[i] = number.fit_transform(mh_new[i].astype('str'))
	
	
	Swarm Plot:
	
	sns.set(style="whitegrid", palette="muted")


# "Melt" the dataset to "long-form" or "tidy" representation
pd.melt(mh, "work_interfere")

# Draw a categorical scatterplot to show each observation
sns.swarmplot(x="work_interfere", y="age_clean", 
              palette='gnuplot', data=mh)
			  
			  
			  
			  
			  
Double donut pie chart
group_names=['Treatment', 'No Treatment']
group_size=[637,622]
subgroup_names=['Treatment.Male','Treatment.Female','Treatment.trans','No Treatment.Male','No Treatment.Female','No Treatment.trans']
subgroup_size=[450,170,15,541,77,4]
 
# Create colors
a, b, c=[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens]
 
# First Ring (outside)
fig, ax = plt.subplots()
ax.axis('equal')
mypie, _ = ax.pie(group_size, radius=1.3, labels=group_names, colors = ['yellowgreen', 'gold'])
plt.setp( mypie, width=0.3, edgecolor='white')

# wedges, texts, autotexts = ax.pie(group_size, autopct=lambda pct: func(pct, data),
                                  #textprops=dict(color="w"))
 
# Second Ring (Inside)
mypie2, _ = ax.pie(subgroup_size, radius=1.3-0.3, labels=subgroup_names, labeldistance=0.7, colors=[a(0.5), b(0.4), c(0.5), a(0.5), b(0.4), c(0.5)])
plt.setp( mypie2, width=0.4, edgecolor='white')
plt.margins(0,0)
plt.title('Donut plot')
# show it
plt.show()


##Dist Plot

f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)                                      # Set up the matplotlib figure
sns.despine(left=True)

sns.distplot(data.sales, color="b", ax=axes[0, 0])

sns.distplot(data.TV, color="r", ax=axes[0, 1])

sns.distplot(data.radio, color="g", ax=axes[1, 0])

sns.distplot(data.newspaper, color="m", ax=axes[1, 1])


10KBFREE07_0d74b8e76631